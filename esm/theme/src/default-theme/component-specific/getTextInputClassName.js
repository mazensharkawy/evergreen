import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var InputAppearances = {};
InputAppearances["default"] = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.none = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white'
  },
  invalid: {},
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none'
  },
  disabled: {
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {Object} the appearance object.
 */

var getTextInputAppearance = function getTextInputAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return InputAppearances.neutral;

    case 'none':
      return InputAppearances.none;

    default:
      return InputAppearances["default"];
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextInputAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dElucHV0Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbIlRoZW1lciIsIm1lbW9pemVDbGFzc05hbWUiLCJzY2FsZXMiLCJwYWxldHRlIiwiSW5wdXRBcHBlYXJhbmNlcyIsImNyZWF0ZUlucHV0QXBwZWFyYW5jZSIsImJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3hTaGFkb3ciLCJuZXV0cmFsIiwiTjVBIiwiTjRBIiwiaW52YWxpZCIsInJlZCIsInBsYWNlaG9sZGVyIiwiY29sb3IiLCJONkEiLCJmb2N1cyIsIm91dGxpbmUiLCJibHVlIiwiQjciLCJCNEEiLCJkaXNhYmxlZCIsIk4yIiwiTjJBIiwiQjZBIiwibm9uZSIsImdldFRleHRJbnB1dEFwcGVhcmFuY2UiLCJhcHBlYXJhbmNlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxNQUFULFFBQXVCLG9CQUF2QjtBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLDJCQUE3QjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsK0JBQW5CO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixnQ0FBcEI7QUFFQSxJQUFNQyxnQkFBZ0IsR0FBRyxFQUF6QjtBQUVBQSxnQkFBZ0IsV0FBaEIsR0FBMkJKLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkI7QUFDdERDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUUsT0FEYjtBQUVKQyxJQUFBQSxTQUFTLDRCQUFxQk4sTUFBTSxDQUFDTyxPQUFQLENBQWVDLEdBQXBDLCtCQUE0RFIsTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQTNFO0FBRkwsR0FEZ0Q7QUFLdERDLEVBQUFBLE9BQU8sRUFBRTtBQUNQSixJQUFBQSxTQUFTLDRCQUFxQkwsT0FBTyxDQUFDVSxHQUFSLENBQVlQLElBQWpDLCtCQUEwREosTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQXpFO0FBREYsR0FMNkM7QUFRdERHLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxLQUFLLEVBQUViLE1BQU0sQ0FBQ08sT0FBUCxDQUFlTztBQURYLEdBUnlDO0FBV3REQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTFYsSUFBQUEsU0FBUywwQkFBbUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFsQywrQkFBMERULE1BQU0sQ0FBQ2lCLElBQVAsQ0FBWUMsRUFBdEUseUJBQXVGbEIsTUFBTSxDQUFDaUIsSUFBUCxDQUFZRSxHQUFuRztBQUZKLEdBWCtDO0FBZXREQyxFQUFBQSxRQUFRLEVBQUU7QUFDUmQsSUFBQUEsU0FBUyw0QkFBcUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFwQyxDQUREO0FBRVJKLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0FBRnhCO0FBZjRDLENBQTdCLENBQTNCO0FBcUJBbkIsZ0JBQWdCLENBQUNLLE9BQWpCLEdBQTJCVCxNQUFNLENBQUNLLHFCQUFQLENBQTZCO0FBQ3REQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWU7QUFENUIsR0FEZ0Q7QUFJdERaLEVBQUFBLE9BQU8sRUFBRTtBQUNQSixJQUFBQSxTQUFTLDRCQUFxQkwsT0FBTyxDQUFDVSxHQUFSLENBQVlQLElBQWpDO0FBREYsR0FKNkM7QUFPdERRLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxLQUFLLEVBQUViLE1BQU0sQ0FBQ08sT0FBUCxDQUFlTztBQURYLEdBUHlDO0FBVXREQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTFgsSUFBQUEsZUFBZSxFQUFFLE9BRlo7QUFHTEMsSUFBQUEsU0FBUyxzQkFBZU4sTUFBTSxDQUFDaUIsSUFBUCxDQUFZTSxHQUEzQjtBQUhKLEdBVitDO0FBZXRESCxFQUFBQSxRQUFRLEVBQUU7QUFDUmQsSUFBQUEsU0FBUyw0QkFBcUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFwQyxDQUREO0FBRVJKLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0FBRnhCO0FBZjRDLENBQTdCLENBQTNCO0FBcUJBbkIsZ0JBQWdCLENBQUNzQixJQUFqQixHQUF3QjFCLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkI7QUFDbkRDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUU7QUFEYixHQUQ2QztBQUluREssRUFBQUEsT0FBTyxFQUFFLEVBSjBDO0FBS25ERSxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsS0FBSyxFQUFFYixNQUFNLENBQUNPLE9BQVAsQ0FBZU87QUFEWCxHQUxzQztBQVFuREMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLE9BQU8sRUFBRTtBQURKLEdBUjRDO0FBV25ESSxFQUFBQSxRQUFRLEVBQUU7QUFDUmYsSUFBQUEsZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWM7QUFEeEI7QUFYeUMsQ0FBN0IsQ0FBeEI7QUFnQkE7Ozs7OztBQUtBLElBQU1JLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FBQUMsVUFBVSxFQUFJO0FBQzNDLFVBQVFBLFVBQVI7QUFDRSxTQUFLLFNBQUw7QUFDRSxhQUFPeEIsZ0JBQWdCLENBQUNLLE9BQXhCOztBQUNGLFNBQUssTUFBTDtBQUNFLGFBQU9MLGdCQUFnQixDQUFDc0IsSUFBeEI7O0FBQ0Y7QUFDRSxhQUFPdEIsZ0JBQWdCLFdBQXZCO0FBTko7QUFRRCxDQVREO0FBV0E7Ozs7Ozs7QUFLQSxlQUFlSCxnQkFBZ0IsQ0FBQzBCLHNCQUFELENBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGhlbWVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGhlbWVyJ1xuaW1wb3J0IG1lbW9pemVDbGFzc05hbWUgZnJvbSAnLi4vdXRpbHMvbWVtb2l6ZUNsYXNzTmFtZSdcbmltcG9ydCBzY2FsZXMgZnJvbSAnLi4vZm91bmRhdGlvbmFsLXN0eWxlcy9zY2FsZXMnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3BhbGV0dGUnXG5cbmNvbnN0IElucHV0QXBwZWFyYW5jZXMgPSB7fVxuXG5JbnB1dEFwcGVhcmFuY2VzLmRlZmF1bHQgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONUF9LCBpbnNldCAwIDFweCAycHggJHtzY2FsZXMubmV1dHJhbC5ONEF9YFxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX0sIGluc2V0IDAgMXB4IDJweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gXG4gIH0sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMnB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfSwgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLmJsdWUuQjd9LCAwIDAgMCAzcHggJHtzY2FsZXMuYmx1ZS5CNEF9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuSW5wdXRBcHBlYXJhbmNlcy5uZXV0cmFsID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yQVxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX1gXG4gIH0sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm94U2hhZG93OiBgMCAwIDAgMnB4ICR7c2NhbGVzLmJsdWUuQjZBfWBcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONEF9YCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yXG4gIH1cbn0pXG5cbklucHV0QXBwZWFyYW5jZXMubm9uZSA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnXG4gIH0sXG4gIGludmFsaWQ6IHt9LFxuICBwbGFjZWhvbGRlcjoge1xuICAgIGNvbG9yOiBzY2FsZXMubmV1dHJhbC5ONkFcbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yXG4gIH1cbn0pXG5cbi8qKlxuICogR2V0IHRoZSBhcHBlYXJhbmNlIG9mIGEgYFRleHRJbnB1dGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwZWFyYW5jZSAtIHRoZSBhcHBlYXJhbmNlIG5hbWVcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGFwcGVhcmFuY2Ugb2JqZWN0LlxuICovXG5jb25zdCBnZXRUZXh0SW5wdXRBcHBlYXJhbmNlID0gYXBwZWFyYW5jZSA9PiB7XG4gIHN3aXRjaCAoYXBwZWFyYW5jZSkge1xuICAgIGNhc2UgJ25ldXRyYWwnOlxuICAgICAgcmV0dXJuIElucHV0QXBwZWFyYW5jZXMubmV1dHJhbFxuICAgIGNhc2UgJ25vbmUnOlxuICAgICAgcmV0dXJuIElucHV0QXBwZWFyYW5jZXMubm9uZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gSW5wdXRBcHBlYXJhbmNlcy5kZWZhdWx0XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNsYXNzTmFtZSBvZiBhIGBUZXh0SW5wdXRgLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGVhcmFuY2UgLSB0aGUgYXBwZWFyYW5jZSBuYW1lXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBhcHBlYXJhbmNlIGNsYXNzIG5hbWUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDbGFzc05hbWUoZ2V0VGV4dElucHV0QXBwZWFyYW5jZSlcbiJdfQ==